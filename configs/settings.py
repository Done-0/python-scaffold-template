"""
Django settings for python-scaffold-template project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os

# ==============================================================================
# 基础路径配置
# https://docs.djangoproject.com/en/5.2/ref/settings/#std-setting-BASE_DIR
# ==============================================================================
BASE_DIR = Path(__file__).resolve().parent.parent

# ==============================================================================
# 核心安全配置
# https://docs.djangoproject.com/en/5.2/topics/settings/#core-settings-topical-index
# ==============================================================================
SECRET_KEY = "django-insecure-6yvd_by89xi*w_@2ntk6a$6^sk!t-24m&2r^w)!ji^d^*w4v91"
DEBUG = True
ALLOWED_HOSTS = []

# ==============================================================================
# 应用配置
# https://docs.djangoproject.com/en/5.2/ref/settings/#installed-apps
# ==============================================================================
INSTALLED_APPS = [
    # Django 核心应用
    "django.contrib.admin",  # 后台管理
    "django.contrib.auth",  # 身份认证
    "django.contrib.contenttypes",  # 内容类型
    "django.contrib.sessions",  # 会话管理
    "django.contrib.messages",  # 消息通知
    "django.contrib.staticfiles",  # 静态文件
    "django.contrib.sites",  # 多站点支持
    # 第三方应用
    "rest_framework",  # REST API 框架
    "corsheaders",  # 跨域支持
    "drf_spectacular",  # API 文档生成
    "django_filters",  # 查询过滤
    "rest_framework_simplejwt",  # JWT 认证
    # 项目应用
    # 'apps.users',
]

# 站点配置
SITE_ID = 1

# ==============================================================================
# 中间件配置
# https://docs.djangoproject.com/en/5.2/ref/settings/#middleware
# ==============================================================================
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ==============================================================================
# URL配置
# https://docs.djangoproject.com/en/5.2/ref/settings/#root-urlconf
# ==============================================================================
ROOT_URLCONF = "configs.urls"

# ==============================================================================
# 模板配置
# https://docs.djangoproject.com/en/5.2/ref/settings/#templates
# ==============================================================================
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# ==============================================================================
# WSGI配置
# https://docs.djangoproject.com/en/5.2/ref/settings/#wsgi-application
# ==============================================================================
WSGI_APPLICATION = "configs.wsgi.application"

# ==============================================================================
# 数据库配置
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# ==============================================================================
DB = {
    "postgresql": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "",
        "USER": "",
        "PASSWORD": "",
        "HOST": "localhost",
        "PORT": "5432",
    },
    "sqlite": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db" / "db.sqlite3",
    },
}

DATABASES = {
    "default": DB.get("postgresql"),
}

# ==============================================================================
# 密码验证
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
# ==============================================================================
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# ==============================================================================
# 国际化设置
# https://docs.djangoproject.com/en/5.2/topics/i18n/
# ==============================================================================
LANGUAGE_CODE = "zh-cn"
TIME_ZONE = "Asia/Shanghai"
USE_TZ = True

# ==============================================================================
# 静态文件配置
# https://docs.djangoproject.com/en/5.2/howto/static-files/
# ==============================================================================
STATIC_URL = "static/"
STATICFILES_DIRS = [
    ("downloads", BASE_DIR / "static" / "downloads"),
    ("uploads", BASE_DIR / "static" / "uploads"),
]
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ==============================================================================
# 媒体文件配置
# https://docs.djangoproject.com/en/5.2/topics/files/
# ==============================================================================
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# ==============================================================================
# REST Framework 配置
# https://www.django-rest-framework.org/api-guide/settings/
# ==============================================================================
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "EXCEPTION_HANDLER": "rest_framework.views.exception_handler",
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
        "rest_framework.renderers.BrowsableAPIRenderer",
    ],
}

# ==============================================================================
# JWT 配置
# https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
# ==============================================================================
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),  # 访问令牌30分钟过期
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  # 刷新令牌7天过期
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
}

# ==============================================================================
# API 文档配置
# https://drf-spectacular.readthedocs.io/en/latest/settings.html
# ==============================================================================
SPECTACULAR_SETTINGS = {
    "TITLE": "API 文档",
    "DESCRIPTION": "API 接口文档",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": True,
    },
    "SERVE_PERMISSIONS": ["rest_framework.permissions.AllowAny"],
    "REDOC_UI_SETTINGS": {
        "hideHostname": True,
    },
    "COMPONENT_SPLIT_REQUEST": True,
    "SORT_OPERATIONS": False,
}

# ==============================================================================
# CORS 配置
# https://github.com/adamchainz/django-cors-headers#configuration
# ==============================================================================
CORS_ALLOW_ALL_ORIGINS = True  # 开发环境设置，生产环境设为False
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8080",
]
CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    "cache-control",
    "pragma",
]
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ["Content-Disposition"]

# ==============================================================================
# 日志配置
# https://docs.djangoproject.com/en/5.2/topics/logging/
# ==============================================================================

LOGS_DIR = BASE_DIR / "logs"
os.makedirs(LOGS_DIR, exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {"format": "{levelname} {asctime} {message}", "style": "{"},
    },
    "filters": {
        "require_debug_true": {"()": "django.utils.log.RequireDebugTrue"},
    },
    "handlers": {
        "console": {
            "level": "DEBUG" if DEBUG else "INFO",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "file": {
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "verbose",
            "filename": LOGS_DIR / "app.log",
            "maxBytes": 10 * 1024 * 1024,
            "backupCount": 5,
        },
        "error_file": {
            "level": "ERROR",
            "class": "logging.handlers.RotatingFileHandler",
            "formatter": "verbose",
            "filename": LOGS_DIR / "error.log",
            "maxBytes": 10 * 1024 * 1024,
            "backupCount": 5,
        },
    },
    "loggers": {
        "django": {
            "handlers": (
                ["console", "file", "error_file"] if DEBUG else ["file", "error_file"]
            ),
            "level": "INFO",
            "propagate": False,
        },
    },
}
